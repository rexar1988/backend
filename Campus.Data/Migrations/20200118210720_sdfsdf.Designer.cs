// <auto-generated />
using Campus.Data.SQLServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Campus.Data.Migrations
{
    [DbContext(typeof(CampusContext))]
    [Migration("20200118210720_sdfsdf")]
    partial class sdfsdf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Admin.NodeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NodeTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.ToTable("Nodes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "Node Type Body 1",
                            MetaDescription = "Node type Description 1",
                            MetaTitle = "Node title 1",
                            NodeTypeId = 1,
                            Title = "Node Title 1",
                            Url = "url-1"
                        },
                        new
                        {
                            Id = 2,
                            Body = "Node Type Body 1",
                            MetaDescription = "Node type Description 1",
                            MetaTitle = "Node title 1",
                            NodeTypeId = 1,
                            Title = "Node Title 1",
                            Url = "url-1"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Admin.NodeTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NodeTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Simple page for node type Page",
                            Instructions = "Удобочитаемое название типа материалов. Этот текст будет показан в списке на странице создания материала. Рекомендуется использовать названия, начинающиеся с прописной буквы и состоящие только из букв, цифр и пробелов. Название должно быть уникальным.",
                            MachineName = "page",
                            Name = "Page"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Simple article for node type Article",
                            Instructions = "Удобочитаемое название типа материалов. Этот текст будет показан в списке на странице создания материала. Рекомендуется использовать названия, начинающиеся с прописной буквы и состоящие только из букв, цифр и пробелов. Название должно быть уникальным.",
                            MachineName = "article",
                            Name = "Article"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Admin.NodeEntity", b =>
                {
                    b.HasOne("Domain.Entities.Admin.NodeTypeEntity", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
